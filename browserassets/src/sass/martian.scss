@import "compass/css3";

//vars
$glyphColor: rgb(175, 202, 219);
$screenColor: rgb(80, 51, 146);
$wallColor: rgb(180, 160, 200);
$pi: 3.14;

//config
$menu-items: 6;
$open-distance: 130px;
$opening-angle: $pi - .2;

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box; /* stops bg color from leaking outside the border: */
}

html {
  height: 100%;
  overflow: hidden;
  margin: auto;
  vertical-align: middle;
}

body {
  height: 100%;
  background: $wallColor;
  color: white;
  text-align: center;
  margin: auto;
  vertical-align: middle;
}

a {
  color: inherit;
}

h1, h2, h3, h4 {
  margin: 0;
  margin-bottom: 10px;
  margin-top: 10px;
}

h1 {
  font-size: 3em;
}

#screen {
  background: $screenColor;
  @include box-shadow(rgb(202, 197, 223) 0 0 20px 5px, rgb(43, 24, 87) 0 0 10px 5px inset);
  @include border-radius(60px);

  width: 90%;
  height: 90%;
  vertical-align: middle;
  margin: 20px auto;
}

%goo {
  filter: url('#shadowed-goo');
  // debug
  // background:rgba(255,0,0,0.2);
}

%ball {
  background: $glyphColor;
  border-radius: 100%;
  width: 80px;
  height: 80px;
  margin-left: -40px;
  position: absolute;
  top: 20px;
  color: white;
  text-align: center;
  line-height: 80px;
  transform: translate3d(0, 0, 0);
  transition: transform ease-out 200ms;
}

.menu-open {
  display: none;
}

.menu-item {
  @extend %ball;
}

.hamburger {
  $width: 25px;
  $height: 3px;
  width: $width;
  height: $height;
  background: white;
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -$width/2;
  margin-top: -$height/2;
  transition: transform 200ms;
}

$hamburger-spacing: 8px;
.hamburger-1 {
  transform: translate3d(0, -$hamburger-spacing, 0);
}

.hamburger-2 {
  transform: translate3d(0, 0, 0);
}

.hamburger-3 {
  transform: translate3d(0, $hamburger-spacing, 0);
}

.menu-open:checked + .menu-open-button {
  .hamburger-1 {
    transform: translate3d(0, 0, 0) rotate(45deg);
  }
  .hamburger-2 {
    transform: translate3d(0, 0, 0) scale(0.1, 1);
  }
  .hamburger-3 {
    transform: translate3d(0, 0, 0) rotate(-45deg);
  }
}

.menu {
  @extend %goo;
  $width: 380px;
  $height: 250px;
  position: absolute;
  left: 50%;
  margin-left: -$width/2;
  padding-top: 20px;
  padding-left: $width/2;
  width: $width;
  height: $height;
  box-sizing: border-box;
  font-size: 20px;
  text-align: left;
}

.menu-item {
  &:hover {
    background: white;
    color: $glyphColor;
  }
  @for $i from 1 through $menu-items {
    &:nth-child(#{$i+2}) {
      transition-duration: 10ms+(120ms*($i));
    }
  }
}

.menu-open-button {
  @extend %ball;
  z-index: 2;
  transition-timing-function: cubic-bezier(0.175, 0.885, 0.320, 1.275);
  transition-duration: 400ms;
  transform: scale(1.1, 1.1) translate3d(0, 0, 0);
  cursor: pointer;
}

.menu-open-button:hover {
  transform: scale(1.2, 1.2) translate3d(0, 0, 0);
}

.menu-open:checked + .menu-open-button {
  transition-timing-function: linear;
  transition-duration: 200ms;
  transform: scale(0.8, 0.8) translate3d(0, 0, 0);
}

.menu-open:checked ~ .menu-item {
  transition-timing-function: cubic-bezier(0.935, 0.000, 0.340, 1.330);
  @for $i from 1 through $menu-items {
    $angle: (($pi - $opening-angle)/2)+(($opening-angle/($menu-items - 1))*($i - 1));

    &:nth-child(#{$i+2}) {
      transition-duration: 80ms+(160ms*$i);
      transform: translate3d(cos($angle)*$open-distance, sin($angle)*$open-distance, 0);
    }
  }
}

#svg {
  display: none;
  height: 0;
  width: 0;
}

// SCANLINES

/* LIST OF FURTHER IMPROVEMENTS */

// 1. settings: direction of moving scanlines (currently: only bottom to top)
// 2. settings: number of moving scanlines (currently: 0 or 1)
// 3. settings: delay between 2 moving scanlines
// 4. check css validity with keyframes 0% without second step

/*
currently working on :
calculation draft for keyframes steps

$scan-moving-duration: 3s;
$scan-moving-delay: 7s;

total time = 10s (duration + delay)
keyframes :
    0%: wait
    15%: start moving
    85%: end moving & start waiting
    100% : wait

(the rest later)

*/

/* REGULAR SCANLINES SETTINGS */

// width of 1 scanline (min.: 1px)
$scan-width: 6px;

// emulates a damage-your-eyes bad pre-2000 CRT screen ♥ (true, false)
$scan-crt: true;

// frames-per-second (should be > 1), only applies if $scan-crt: true;
$scan-fps: 60;

// scanline-color (rgba)
$scan-color: rgba(#000, .2);

// set z-index on 8, like in ♥ 8-bits ♥, or…
// set z-index on 2147483648 or more to enable scanlines on Chrome fullscreen (doesn't work in Firefox or IE);
$scan-z-index: 2147483648;

/* MOVING SCANLINE SETTINGS */

// moving scanline (true, false)
$scan-moving-line: true;

// opacity of the moving scanline
$scan-opacity: .75;

/* MIXINS */

// apply CRT animation: @include scan-crt($scan-crt);
@mixin scan-crt($scan-crt) {
  @if $scan-crt == true {
    animation: scanlines 6s steps($scan-fps * 6) infinite;
  } @else {
    animation: none;
  }
}

// apply CRT animation: @include scan-crt($scan-crt);
@mixin scan-moving($scan-moving-line) {
  @if $scan-moving-line == true {
    animation: scanline 8s linear infinite;
  } @else {
    animation: none;
  }
}

/* CSS .scanlines CLASS */

.scanlines {
  position: relative;
  overflow: hidden; // only to animate the unique scanline

  &:before,
  &:after {
    display: block;
    pointer-events: none;
    content: '';
    position: absolute;
  }

  // unique scanline travelling on the screen
  &:before {
    // position: absolute;
    // bottom: 100%;
    width: 100%;
    height: $scan-width * 1;
    z-index: $scan-z-index + 1;
    background: $scan-color;
    opacity: $scan-opacity;
    // animation: scanline 6s linear infinite;
    @include scan-moving($scan-moving-line);
  }

  // the scanlines, so!
  &:after {
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: $scan-z-index;
    background: linear-gradient(
                    to bottom,
                    transparent 50%,
                    $scan-color 51%
    );
    background-size: 100% $scan-width*2;
    @include scan-crt($scan-crt);
  }
}

/* ANIMATE UNIQUE SCANLINE */
@keyframes scanline {
  0% {
    transform: translate3d(0, 200000%, 0);
    // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
  }
}

@keyframes scanlines {
  0% {
    background-position: 0 50%;
    // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
  }
}