#!/usr/bin/env bash
## Copyright (c) 2020 Aleksej Komarov
## SPDX-License-Identifier: MIT

set -e
shopt -s globstar
shopt -s expand_aliases

## Initial set-up
## --------------------------------------------------------

## Returns an absolute path to file
alias tgui-realpath="readlink -f"

## Fallbacks for GNU readlink
## Detecting GNU coreutils http://stackoverflow.com/a/8748344/319952
if ! readlink --version >/dev/null 2>&1; then
  if hash greadlink 2>/dev/null; then
    alias tgui-realpath="greadlink -f"
  else
    alias tgui-realpath="perl -MCwd -le 'print Cwd::abs_path(shift)'"
  fi
fi

## Find a canonical path to tgui project root
base_dir="$(dirname "$(tgui-realpath "${0}")")/.."
base_dir="$(tgui-realpath "${base_dir}")"
## Find a canonical path to repo root
root_dir="$(dirname "$(tgui-realpath "${0}")")/../.."
root_dir="$(tgui-realpath "${root_dir}")"
## Find a canonical path to build target folder
target_dir_name="tgui"
target_dir="$(dirname "$(tgui-realpath "${0}")")/../../browserassets/src/${target_dir_name}"
target_dir="$(tgui-realpath "${target_dir}")"

## Fall back to running Yarn from the repo
if ! hash yarn 2>/dev/null; then
  yarn_releases=("${base_dir}"/.yarn/releases/yarn-*.cjs)
  yarn_release="${yarn_releases[0]}"
  yarn() {
    node "${yarn_release}" "${@}"
  }
fi


## Functions
## --------------------------------------------------------

## Installs node modules
task-install() {
  cd "${base_dir}"
  yarn install
}

## Runs rspack
task-rspack() {
  cd "${base_dir}"
  BROWSERSLIST_IGNORE_OLD_DATA=true
  yarn run rspack "${@}"
}

## Runs a development server
task-dev-server() {
  cd "${base_dir}"
  yarn run tgui:dev "${@}"
}

## Run a linter through all packages
task-lint() {
  cd "${base_dir}"
  yarn run tsc
  echo "tgui: type check passed"
  yarn run tgui:lint "${@}"
  echo "tgui: lint check passed"
  yarn run tgui:prettier "${@}"
  echo "tgui: prettier check passed"
}

## Run a linter through all packages & fix
task-lint-fix() {
  cd "${base_dir}"
  yarn run tsc
  echo "tgui: type check passed"
  yarn run tgui:lint-fix "${@}"
  echo "tgui: lint check & fix passed"
  yarn run tgui:prettier-fix "${@}"
  echo "tgui: prettier check & fix passed"
}

task-test() {
  cd "${base_dir}"
  yarn run tgui:test
}

task-test-ci() {
  cd "${base_dir}"
  yarn run tgui:test-ci
}

## Mr. Proper
task-clean() {
  cd "${base_dir}"
  rm -rf ../browserassets/src/tgui/.tmp
  rm -f ../browserassets/src/tgui/*.map
  rm -f ../browserassets/src/tgui/*.chunk.*
  rm -f ../browserassets/src/tgui/*.bundle.*
  rm -f ../browserassets/src/tgui/*.hot-update.*
  ## Yarn artifacts
  rm -rf .yarn/cache
  rm -rf .yarn/unplugged
  rm -rf .yarn/webpack # Kept to clean up old webpack if still present
  rm -rf .yarn/rspack
  rm -f .yarn/build-state.yml
  rm -f .yarn/install-state.gz
  rm -f .yarn/install-target
  rm -f .pnp.*
  ## NPM artifacts
  rm -rf **/node_modules
  rm -f **/package-lock.json

  ## Build artifacts
  cd "${target_dir}"
  rm -rf .tmp
}

## Validates current build against the build stored in git
task-validate-build() {
  cd "${target_dir}/.."
  local diff
  diff="$(git diff --ignore-all-space --text "${target_dir_name}/*")"
  if [[ -n ${diff} ]]; then
    echo "Error: our build differs from the build committed into git."
    echo "Please rebuild tgui."

    # Check if the difference might just be line endings
    local crlfCheck
    crlfCheck="$(git diff --ignore-all-space --ignore-cr-at-eol --text "${target_dir_name}/*")"
    if [[ -z ${crlfCheck} ]]; then
      echo "Note: The only difference appears to be line endings (LF vs CRLF)."
      echo "You may want to check your git core.autocrlf config."

      # Examine a sample of the differing files to show line endings
      local diffFiles
      diffFiles="$(git diff --name-only "${target_dir_name}/*")"
      if [[ -n ${diffFiles} ]]; then
        local sampleFile
        sampleFile="$(echo "${diffFiles}" | head -n 1)"
        if [[ -n ${sampleFile} ]]; then
          echo "Examining line endings in file: ${sampleFile}"
          if command -v file >/dev/null 2>&1; then
            file "${sampleFile}"
          fi
        fi
      fi
    else
      echo "There are content differences beyond just line endings."

      echo "Changed files:"
      git diff --name-only "${target_dir_name}/*"

      echo ""
      for file in $(git diff --name-only "${target_dir_name}/*"); do
        echo "=== Character-level diff for: ${file} ==="
        # Move to root directory to ensure file paths are correct
        pushd "${root_dir}" > /dev/null
        git diff --text --word-diff=color --word-diff-regex=. -- "${file}" | head -n 20
        popd > /dev/null
        echo ""
      done
    fi
    exit 1
  fi
  echo "tgui: build is ok"
}

## Installs merge drivers and git hooks
task-install-git-hooks() {
  cd "${root_dir}"
  git config --replace-all merge.tgui-merge-bundle.driver \
    "${root_dir}/tgui/bin/tgui --merge=bundle %P %O %A %B %L"
  echo "tgui: Merge drivers have been successfully installed!"
  exit 0
}

## Bundle merge driver
task-merge-bundle() {
  local file_path="${1}"
  local file_ancestor="${2}"
  local file_current="${3}"
  local file_other="${4}"
  local conflict_marker_size="${5}"
  echo "----------------------"
  echo "tgui: rebuilding a conflicted tgui bundle, ${file_path}"
  task-install
  task-rspack --mode=production
  echo "tgui: replacing conflicted bundle with newly compiled bundle"
  cd ../
  cat $file_path > $file_current
  exit 0
}


## Main
## --------------------------------------------------------

if [[ ${1} == "--merge"* ]]; then
  if [[ ${1} == "--merge=bundle" ]]; then
    shift 1
    task-merge-bundle "${@}"
  fi
  echo "Unknown merge strategy: ${1}"
  exit 1
fi

if [[ ${1} == "--install-git-hooks" ]]; then
  shift 1
  task-install-git-hooks
  exit 0
fi

## Continuous integration scenario
if [[ ${1} == "--ci" ]]; then
  shift 1
  task-clean
  task-install
  task-test-ci
  task-lint "${@}"
  task-rspack --mode=production
  task-validate-build
  exit 0
fi

if [[ ${1} == "--clean" ]]; then
  task-clean
  exit 0
fi

if [[ ${1} == "--dev" ]]; then
  shift
  task-install
  task-dev-server "${@}"
  exit 0
fi

if [[ ${1} == '--lint' ]]; then
  shift 1
  task-install
  task-lint "${@}"
  exit 0
fi

if [[ ${1} == '--lint-fix' ]]; then
  shift 1
  task-install
  task-lint-fix "${@}"
  exit 0
fi

if [[ ${1} == '--test' ]]; then
  shift 1
  task-install
  task-test "${@}"
  exit 0
fi

if [[ ${1} == '--test-ci' ]]; then
  shift 1
  task-install
  task-test-ci "${@}"
  exit 0
fi

## Analyze the bundle
if [[ ${1} == '--analyze' ]]; then
  task-install
  task-rspack --mode=production --analyze
  exit 0
fi

## Make a production rspack build
if [[ ${1} == '--build' ]]; then
  task-install
  task-rspack --mode=production
  exit 0
fi

## Make a production rspack build + Run eslint
if [[ -z ${1} ]]; then
  task-install
  task-lint
  task-rspack --mode=production
  exit 0
fi

## Run rspack with custom flags
task-install
task-rspack "${@}"
